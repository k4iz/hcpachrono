{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "/*All necessary libraries*/\n#include <SD.h>\n#include <SPI.h>\n#include <Wire.h>\n//#include <ESP8266WiFi.h>\n#include \"mysensors.h\"\n\n\n#define  FILENAME           \"logfile.txt\"        // datafile name \n#define  SAMPLING_RATE      3                    // seconds (reading interval)\n\n/*sd card*/\nFile myFile; //defining object\n\n/*Setting up CAYENNE*/\n//#define CAYENNE_DEBUG\n#define CAYENNE_PRINT Serial\n#include <CayenneMQTTESP8266.h>\n\n//network info\nchar ssid[] = \"GVT-2707\";\nchar wifiPassword[] = \"S1F6542520\";\n\n//Cayenne authentication info. This should be obtained from the Cayenne Dashboard.\nchar username[] = \"444972e0-286d-11e7-a4a6-237007b7399c\";\nchar password[] = \"9c85871452d250e2a28630b16b0f0dbdf5d81e1e\";\nchar clientID[] = \"40096c10-59ed-11e7-9118-bfd202a30a41\";\n\nunsigned long lastMillis = 0;\n\n\nvoid setup() \n{\n    /*Open serial communications and wait for port to open:*/\n    Serial.begin(9600);\n    while (!Serial) {};\n\n    #ifndef ESP8266\n        while (!Serial); // for Leonardo/Micro/Zero\n    #endif\n\n    Cayenne.begin(username, password, clientID, ssid, wifiPassword);\n\n    initializeSDCard();\n    initializeRTC();\n    initializeDHT22();\n    initializeTCS34725();\n}\n\n\nvoid loop() \n{\n    Cayenne.loop();\n\n        //Publish data every 10 seconds (10000 milliseconds). Change this value to publish at a different interval.\n    if (millis() - lastMillis > 10000) {\n        lastMillis = millis();\n        //Write data to Cayenne here. This example just sends the current uptime in milliseconds.\n        Cayenne.virtualWrite(0, lastMillis);\n        //Some examples of other functions you can use to send data.\n        //Cayenne.celsiusWrite(1, 22.0);\n        //Cayenne.luxWrite(2, 700);\n        //Cayenne.virtualWrite(3, 50, TYPE_PROXIMITY, UNIT_CENTIMETER);\n    }\n\n\n\n    myFile = SD.open(FILENAME, FILE_WRITE);\n    if (myFile) \n    {\n        printDateTime(myFile);\n        myFile.print(\",\");\n\n        printLightData(myFile);\n        myFile.print(\",\");\n\n        printTemperetureData(myFile);\n       \n        myFile.close();\n        Serial.println(\"[OK] Datalog written\\n\");\n    } \n    else \n    {\n      /*if the file didn't open, print an error:*/\n      Serial.println(\"error opening the log file\");\n    }\n    delay(1000 * SAMPLING_RATE); //wait 3 seconds to run loop again\n}\n\n//Default function for processing actuator commands from the Cayenne Dashboard.\n//You can also use functions for specific channels, e.g CAYENNE_IN(1) for channel 1 commands.\n// CAYENNE_IN_DEFAULT()\n// {\n//     CAYENNE_LOG(\"CAYENNE_IN_DEFAULT(%u) - %s, %s\", request.channel, getValue.getId(), getValue.asString());\n//     //Process message here. If there is an error set an error message using getValue.setError(), e.g getValue.setError(\"Error message\");\n// }",
			"file": "src/main.cpp",
			"file_size": 2836,
			"file_write_time": 131429048196023236,
			"settings":
			{
				"buffer_size": 2743,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "Package Control: INS",
		"selected_items":
		[
			[
				"Package Control: INS",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/Makefile",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Makefile",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/lib/RTClib/examples/ds3231/Makefile",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/lib/RTClib/examples/ds3231/ds3231.ino",
		"/C/Users/rafa/OneDrive/#Projects/Arduino Uno/Datalogger_Complete/src/main.cpp",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/lib/RTClib/examples/ds1307/ds1307.ino",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/lib/Adafruit_Unified_Sensor/Adafruit_Sensor.h",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/platformio.ini",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/src/main.cpp",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/hcpachrono.sublime-project",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/.gitignore",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/lib/Adafruit_TCS34725/Adafruit_TCS34725.cpp",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/lib/RTClib/examples/ds3231/RTClib.cpp",
		"/C/Users/rafa/OneDrive/#Projects/hcpachrono/Datalogger_Complete/src/Makefile",
		"/C/Users/rafa/OneDrive/#Projects/Nodemcu/Datalogger_Complete/src/main.cpp",
		"/C/Users/rafa/blink/src/Makefile",
		"/C/Users/rafa/AppData/Roaming/Sublime Text 3/Packages/User/Terminal.sublime-settings",
		"/C/Users/rafa/AppData/Roaming/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
		"/C/Users/rafa/AppData/Roaming/Sublime Text 3/Packages/Terminal/Default (Windows).sublime-keymap",
		"/C/Users/rafa/OneDrive/#Projects/PlatformIO/Arduino Uno/DHT22_lib_test/lib/private_lib/DHT/DHT.h",
		"/C/Users/rafa/OneDrive/#Projects/PlatformIO/Arduino Uno/DHT22_lib_test/lib/private_lib/DHT/DHT.cpp",
		"/C/Users/rafa/NTUSER.DAT",
		"/C/Users/rafa/Downloads/[kickass.so]glossika.spanish.castilian.fluency.1.3.torrent",
		"/C/Users/rafa/Documents/WeChat Files/rafaeljost/BackupFiles/iphone_18349b6d92ce98f9285f6dc2cad7ddcb/BAK_0_TEXT",
		"/C/Users/rafa/Documents/WeChat Files/rafaeljost/BackupFiles/iphone_18349b6d92ce98f9285f6dc2cad7ddcb/Backup.db"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"parameters",
			"16"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2743,
						"regions":
						{
						},
						"selection":
						[
							[
								78,
								78
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "hcpachrono.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ds32in",
				"Datalogger_Complete\\lib\\RTClib\\examples\\ds3231\\ds3231.ino"
			],
			[
				"ds130",
				"Datalogger_Complete\\lib\\RTClib\\examples\\ds1307\\ds1307.ino"
			],
			[
				"ds32",
				"Datalogger_Complete\\lib\\RTClib\\examples\\ds3231\\ds3231.ino"
			],
			[
				"mak",
				"Datalogger_Complete\\Makefile"
			],
			[
				"main",
				"Datalogger_Complete\\src\\main.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 165.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
